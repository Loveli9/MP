
IOC
@Component
@Value
@Conditional:
基于条件的自动配置,一般配合Condition接口一起使用只有满足了实现类中的条件,即方法返回true,才会装配,否则不装配，可作用在方法或者类上,表示对类中所有方法起作用，参数可以是一个实现类,也可以是多个,即同时满足多个条件才会装配,构成一个数组
@Bean
@SpringBootConfiguration
标注此类为配置类
@ConditionalOnBean: 根据容器中是否有某个Bean进行装配
@ConditionalOnClass(name = "com.hou.ioc.bean.User")
@ConditionalOnProperty(value = "runnable.enable", havingValue = "true", matchIfMissing = true)
根据配置中属性值装配 ,value=配置key,havingValue为条件,即当key对应值为true时装配，matchIfMissing=true:表示当此配置没有的时候进行装配
@PropertySource("classpath:db.yml")
指定配置文件位置
@Configuration
表示此类为 配置文件类,相当于配置文件
@ConfigurationProperties("database")
配置文件的属性
@EnableAutoConfiguration
@EnableAsync   //启用异步特性,启用后有@Async注解的方法会异步执行,否则有Async注解也会同步
@Order(2)   //调整顺序,越大越往后执行
@SpringBootApplication

AOP
@Aspect
@Pointcut("execution(* com.hou.aop.*.*(..))")  //定义切入点
@Before("pointCut()") 前置通知: 使用定义好的切入点方法名表示
@After("execution(* com.hou.aop.*.*(..)) && args(user)")  JoinPoint可以获取到代理的对象以及参数,args获取方法参数,注:只有有user参数的方法才会走后置通知,因为是 &&

JDBC
@Repository
@Autowired
@Transactional(rollbackFor = Exception.class, noRollbackFor = NullPointerException.class)
@Transactional
此方法使用事务
参数:
rollbackFor:设置对哪些异常进行回滚,默认是运行时异常,其他不回滚
noRollbackFor:设置哪些异常不回滚

MVC
@RestController
@RequestMapping
@GetMapping
@PostMapping

@ControllerAdvice(basePackages = "com.hou.*",annotations = Controller.class) 增强的Controller
@InitBinder  全局数据预处理
@ModelAttribute 全局数据绑定
@ExceptionHandler 全局异常处理

mybatis
@MappedJdbcTypes(JdbcType.INTEGER) //声明JDBC类型为整型,即数据库中对应字段类型
@MappedTypes(value = SexEnum.class)  //声明需要转换的java类
@Transactional(isolation = Isolation.READ_COMMITTED,propagation = Propagation.REQUIRED)


@Cacheable(value = "redisCache",key="'redis_user_'+#result") //使用key将方法结果缓存
对于一个支持缓存的方法，Spring会在其被调用后将其返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。
Spring在缓存方法的返回值时是以键值对进行缓存的，值就是方法的返回结果，至于键的话，Spring又支持两种策略，默认策略和自定义策略，这个稍后会进行说明。需要注意的是当一个支持缓存的方法在对象内部被调用时是不会触发缓存功能的。@Cacheable可以指定三个属性，value、key和condition。
@CachePut(value = "redisCache",key="'redis_user_'+#id")
与@Cacheable不同的是使用@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。
如果返回值null，下次进行该key值查询时，还会查一次数据库，此时相当于@CacheEvict注解;
如果返回值不为null，此时会进行该key值缓存的更新，更新缓存值为返回的数据；

@CacheEvict(value = "redisCache",key="'redis_user_'+#id",beforeInvocation = false)
@CacheEvict是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。@CacheEvict可以指定的属性有value、key、condition、allEntries和beforeInvocation。其中value、key和condition的语义与@Cacheable对应的属性类似。即value表示清除操作是发生在哪些Cache上的（对应Cache的名称）；key表示需要清除的是哪个key，如未指定则会使用默认策略生成的key；condition表示清除操作发生的条件
@Caching
@Caching注解可以让我们在一个方法或者类上同时指定多个SpringCache相关的注解。其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict。

















